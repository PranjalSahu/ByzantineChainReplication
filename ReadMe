README
------
BCR by Pranjal Sahu and Santiago Vargas


---------------------------------------------------------------------------------------------------------
PLATFORM.

We have used CPython 3.6
We have used DistAlgo version 1.0.9
We have used macOS 10.13

---------------------------------------------------------------------------------------------------------
INSTRUCTIONS.

To run the system, execute the following command

python3 -m da -n (Nodename) src/main.da {config}

Where {config} is the configuration file.
{Nodename} is the node for example, OlympusNode and ClientNode

Run both of these commands in two different hosts for multihost functionality
Example: python3 -m da -n OlympusNode src/main.da ./config/config7.txt
         python3 -m da -n ClientNode src/main.da ./config/config7.txt
      
The above command will run the crash test case and the test file will be created inside the logs folder with 
the name as test case name mentioned in the crash.txt

---------------------------------------------------------------------------------------------------------
WORKLOAD GENERATION.

For pseudorandom workload generation, we previously downloaded a list of words to a file (words.txt).
From this list of words, during runtime, we take a subset of words. We then use python's random library,
apply the pseudorandom seed, and use random.randint to generate a random operation and a random value.
The random value is a word from the words list or corresponding indices in the case of the SLICE command.

---------------------------------------------------------------------------------------------------------
BUGS AND LIMITATIONS.

1. Our code has not been tested for multihost functionality
2. We are omitting the trigger forwarded_request
3. We have not tested the code for cases when different clients operate on the same key. It should work
we don't have the automated test case for it. This can be verified manually by inspecting logs.



---------------------------------------------------------------------------------------------------------
CONTRIBUTIONS.

Pranjal:
1. All the failure triggers (Fault injection)
2. All the failures (Fault injection)
3. Olympus creation and replica creation (Creating initial configuration, setup and starting process)
4. pseudorandom workload creation
5. Testing framework creation in client (checking dictionary content)
6. Reading configuration from config file and generating workload from it
7. Writing testing output to log files (Logging)
8. Generating different test cases in config folder
9. Readme and testing.txt

Santiago:
1. Sending new requests and retransmission from client
2. Receiving new requests and retransmission from replicas
3. Order Command Shuttle and Result Shuttles
4. Validation or order and result proofs at the client and replicas
5. Logging system
6. Applying order command transition at the replica

---------------------------------------------------------------------------------------------------------
MAIN FILES.

All source code files are in src/
--main.da is the code that launched olympus and clients
--olympus.da sets up the olympus process and launches replicas
--replica.da contains the logic for each replica
--request.da contains the data structure for a request/order object
--status.da contains constants

Configuration files are in config/
--These files contain specific configurations for test cases

---------------------------------------------------------------------------------------------------------
CODE SIZE.

main.py
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Python                           1              6              1            160
-------------------------------------------------------------------------------

olympus.py
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Python                           1              7              1             76
-------------------------------------------------------------------------------

replica.py
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Python                           1             19              1            374
-------------------------------------------------------------------------------

request.py
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Python                           1              5              1             32
-------------------------------------------------------------------------------

client.py
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Python                           1             14              1            240
-------------------------------------------------------------------------------

status.py
-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Python                           1              1              1              7
-------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------
LANGUAGE FEATURE USAGE.

report the numbers of list comprehensions, dictionary comprehensions, set comprehensions, aggregations, and quantifications in your code.  the first two are Python features; the others are DistAlgo features.

---------------------------------------------------------------------------------------------------------
OTHER COMMENTS.
