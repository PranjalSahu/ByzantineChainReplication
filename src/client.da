import itertools
import nacl.hash
from nacl.bindings.utils import sodium_memcmp
import pickle
import logging
import time
import os
Request = import_da('request').Request
OPTYPE  = import_da('request').OPTYPE

class Client(process):
    def setup(c_timeout: int, olympus: Olympus, workload: list, testfilename: testfilename, c_index: int):
        # Setup logging
        log_filename = './logs/client' + str(c_index) + '.logs'
        with open(log_filename, 'w'):
            pass
        self.logger = logging.getLogger('client' + str(c_index) + '_logger')
        self.logger.setLevel(logging.DEBUG)
        formatter = logging.Formatter(fmt='%(asctime)s.%(msecs)03d - %(module)s:%(process)d - %(levelname)s - %(message)s',
                                    datefmt='%m/%d/%Y %I:%M:%S')
        # Used to print to console
        ch = logging.StreamHandler()
        ch.setLevel(logging.INFO)
        ch.setFormatter(formatter)
        # Used to output to a file
        fh = logging.FileHandler(log_filename)
        fh.setLevel(logging.DEBUG)
        fh.setFormatter(formatter)
        self.logger.addHandler(ch)
        self.logger.addHandler(fh)

        # Create counters
        self.req_counter = itertools.count()
        self.conf_counter = itertools.count()
        # Initialize empty replicas and replica key
        self.replicas = []
        self.public_keys = []
        self.test_state = {}        # to be used for testing
        self.logger.debug("Client Set Up.")
        

    # Asks Olympus for the latest config and returns the results
    def getLatestConfig():
        # Increment the conf_id
        req_id = next(self.conf_counter)
        id = self
        public_key = 1  # Todo: Assign a meaningful value
        payload = (req_id, id, public_key)
        send(("GetConfig", payload), to=self.olympus)
        if await(some(received(("ConfigResponse", (resp_id, replica_list, p_keys))), has=(resp_id == req_id))):
            return replica_list, p_keys

    def create_new_request(request):
        r_type, key, val = request
        # Increment req_id for uniqueness
        req_id = next(self.req_counter)
        # Create the request object
        return Request(req_id, r_type, key, val, self, self.c_index)

    # Sends a new request
    def send_new_request(request):
        # Update the config before sending a new request
        self.replicas, self.public_keys = getLatestConfig()
        
        if request.op == OPTYPE.DUMMY:
            logger.info('REQUEST OP TESTING ' + str(request.request_id))

        # Get head replica
        if self.replicas:
            if request.op == OPTYPE.DUMMY:
                logger.info('DIRECTLY SENDING REQUEST TO ' + str(request.key))
                head_replica = self.replicas[request.key]
            else:
                head_replica = self.replicas[0]
            return transmit_request(request, {head_replica})

    # Returns true if the result proof is valid
    def validate_result_proof(result_proof, result, orig_order):
        # Do not consider requests for different request ids... This is not really needed
        first_result_stmt = pickle.loads(result_proof[0].message)
        sample_request_id = first_result_stmt[0].request_id

        if orig_order.request_id != sample_request_id:
            return False

        # Check the length
        if len(self.replicas) != len(result_proof):
            return False

        # Check for valid proof signatures
        for i, proof in enumerate(result_proof):
            try:
                self.public_keys[i].verify(proof)
            except:
                logger.error("----Result Proof Signature Validation Error---")
                return False

        # Hash the result
        response_hash = nacl.hash.sha256(pickle.dumps(result))
        for proof in result_proof:
            order, result_hash = pickle.loads(proof.message)
            # Compare order command contents
            if not orig_order.get_body() == order.get_body():
                logger.error("---Result Proof Order Validation Error---")
                return False
            # Compare result hash
            if not sodium_memcmp(response_hash, result_hash):
                logger.error("---Result Proof Hash Validation Error---")
                return False

        logger.debug('------ Result Proof has been validated ---------')
        return True

    # # for sending a 
    # def test_transmit(request, dest_replicas, request_type):
    #     request_msg = request_type, request.get_body()
    #     send(request_msg, to=dest_replicas)

    #     if await(some(received(("Response", (res, result_proofs, id))), has=validate_result_proof(result_proofs, res, request))):
    #         logger.info("Received valid response: '" + str(res) + "' for request:" + str(id))

    # for sending a retransmit request to obtain result from cache and see the error while doing validation
    def test_retransmit(req, replica_index, request_type = Request.RETRANSMISSION):
        request = create_new_request(req)
        request_msg = request_type, request.get_body()

        self.replicas, self.public_keys = getLatestConfig()
        replica_to_send = self.replicas[replica_index]
        dest_replicas = {replica_to_send}

        logger.error("--------- Retranmitting Testing 2 ---------")
        # send the request as retranmission
        send(request_msg, to=dest_replicas)

        #logger.error("--------- Retranmitting Testing 3 ---------")
        
        if await(some(received(("Response", (res, result_proofs, id))), has=validate_result_proof(result_proofs, res, request))):
            logger.info("Received valid response: '" + str(res) + "' for request:" + str(id))
        elif timeout(c_timeout):
            # Response not received, retransmit
            logger.info("-----Timeout: Retransmission of Request ID: " + str(request.request_id) + "-----")

            # Retransmit to all replicas
            transmit_request(request, set(replicas), Request.RETRANSMISSION)
        return


    # Transmit a request to dest_replicas set
    def transmit_request(request, dest_replicas, request_type = Request.NEW_REQUEST):
        # Generate the appropriate request message
        request_msg = request_type, request.get_body()

        # Todo: Sign request

        # Send the request
        send(request_msg, to=dest_replicas)
        
        #dont wait for dummy requests since it is only for the purpose of triggering
        if request.op == OPTYPE.DUMMY:
            return

        # Block until receiving a validated response or timeout
        if await(some(received(("Response", (res, result_proofs, id))), has=validate_result_proof(result_proofs, res, request))):
            logger.info("Received valid response: '" + str(res) + "' for request: " + str(id))
        elif some(received(("Error", (resp, id))), has= id==request.request_id):
            logger.error("Received Error: \"" + str(resp) + "\" for request: " + str(request.request_id) + ' --- ' + str(request.get_body()))
            # Wait for a timeout in order to attempt to avoid recursion limit
            time.sleep(c_timeout)
            if request.op == OPTYPE.DUMMY:
                return
            # Update replicas list from Olympus (ie update configuration)
            self.replicas, self.public_keys = getLatestConfig()

            # Transmit request as a new request to head
            if replicas:
                head_replica = replicas[0]
                return transmit_request(request, {head_replica})
        elif timeout(c_timeout):
            # Response not received, retransmit
            logger.info("-----Timeout: Retransmission of Request ID: " + str(request.request_id) + "-----" + str(request.get_body()))

            # Update replicas list from Olympus (ie update configuration)
            self.replicas, self.public_keys = getLatestConfig()

            # Retransmit to all replicas
            return transmit_request(request, set(replicas), Request.RETRANSMISSION)

    def validate_test_result_response(req_id, set_of_test_req_ids):
        if req_id in set_of_test_req_ids:
            return True
        return False

    def test_result(workload, output_results):
        all_used_keys = {}
        fp = open(testfilename, 'a')
        fp.write('--------------------------------------------\n')
        fp.write('Client # '+str(c_index)+'\n')
        fp.write('--------------------------------------------\n')
        # Generate expected state
        for index, request_msg in enumerate(workload):
            key = request_msg[1]
            val = request_msg[2]

            if request_msg[0] == OPTYPE.PUT:
                self.test_state[key] = val
            elif request_msg[0] == OPTYPE.SLICE:
                s = self.test_state.get(key)
                if s:
                    i, j = val
                    if 0 <= i and i < j and j < len(s):
                        self.test_state[key] = self.test_state[key][i:j]
            elif request_msg[0] == OPTYPE.APPEND:
                if self.test_state.get(key):
                    self.test_state[key] = self.test_state[key] + val
            else:
                continue
            all_used_keys[key] = 1

        old_length = len(listof(p, received(("Response", _), from_=p)))
        request_to_send  = {}
        set_of_test_req_ids = {}

        for idk, k in enumerate(all_used_keys):
            req = (OPTYPE.GET, k, "")
            req = create_new_request(req)
            set_of_test_req_ids[req.request_id] = 1
            send_new_request(req)
            request_to_send[req.request_id] = k
        #logger.error('[ERROR] Reached here')

        await(len(setof((req_id, res), received(('Response', (res, _, req_id)), from_=p), validate_test_result_response(req_id, set_of_test_req_ids))) >= len(set_of_test_req_ids))
        test_replies = setof((req_id, res), received(('Response', (res, _, req_id)), from_=p), validate_test_result_response(req_id, set_of_test_req_ids))
        
        pvalues = list(test_replies)
        pvalues.sort()
        result_value_hash = {}
        #logger.error('ERROR pvalues are '+str(pvalues)+' '+str(request_to_send))
        for p in pvalues:
            result_value_hash[request_to_send[p[0]]] = p[1][1]

        for k in self.test_state:
            if self.test_state.get(k) != result_value_hash.get(k):
                fp.write('[NOT MATCHED] RESULT OF ' +str(k)+ ' EXPECTED:'+ str(self.test_state.get(k))+ ' OBTAINED: '+str(result_value_hash.get(k))+'\n')
            else:
                fp.write('[MATCHED]     RESULT OF '+ str(k)  + ' EXPECTED:'+ str(self.test_state.get(k))+ ' OBTAINED: ' +str(result_value_hash.get(k))+'\n')
        
        fp.close()

    def run():
        for i, request in enumerate(workload):
            logger.info("Client " + str(self.c_index) + " sending request:" + str(i+1) + '   '+ str(request))
            if request[0] == OPTYPE.RETRANSMIT:
                logger.error("--------- Retransmitting Testing ---------")
                logger.error('WORKLOAD CHECK ERROR '+ str(workload[i-1]))
                req = workload[i-1]     # resend the last request
                test_retransmit(req, int(request[1]))
            else:
                req = create_new_request(request)
                send_new_request(req)
        logger.error("[ERROR] WORKLOAD LENGTH IS " + str(len(workload)))
        await(len(listof(p, received(("Response", _), from_=p))) >= len(workload))
        

        pvalues = setof((idp, res), received(('Response', (res, _, idp))))
        pvalues = list(pvalues)
        pvalues.sort()
        test_result(workload, pvalues)
        logger.info("Client " + str(self.c_index) + " Received All Responses. Terminating...")
        exit(-1)
