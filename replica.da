from enum import Enum, auto

Request = import_da('request').Request
OPTYPE = import_da('request').OPTYPE


class Replica(process):
    def setup(state: dict):
        output("Replica setup")
        output("State", state)

    def run():
        await(False)

    def receive(msg=m, from_=client):
        m_type, m_body = m
        request = Request.from_body(m_body)
        output("Received Request ID:", request.request_id)
        # output("Type:", request.op_type)
        # output("Key:", request.key, " -- Val:", request.value)

        # State management logic
        if request.op_type == OPTYPE.PUT:
            state[request.key] = request.value
            response = "Success"
        elif request.op_type == OPTYPE.GET:
            response = "Get Failed"
            if state.get(request.key):
                response = "Success"
        elif request.op_type == OPTYPE.SLICE:
            response = "Slice Failed"
            if state.get(request.key):
                i, j = request.value
                state[request.key] = state[request.key][i:j]
                response = "Blah Success"
        elif request.op_type == OPTYPE.APPEND:
            response = "Append Failed"
            if state.get(request.key):
                state[request.key] = state[request.key] + request.value
                response = "Success"
        else:
            response = "Invalid Operation Type"

        send((response, request.request_id), to=client)
        # output("Get:", state.get(request.key))
        output("New State:", state)
        output("Sent Response,", response, ", for Request ID:", request.request_id)
