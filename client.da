Request = import_da('request').Request
OPTYPE = import_da('request').OPTYPE
#Olympus = import_da('olympus').Olympus

class Client(process):
    def setup(c_timeout: int, olympus: Olympus):
        # Start generating request ids at 0
        self.req_id = 0
        # Ask Olympus for the current configuration
        self.replicas = []
        self.public_keys = []
        send(("GetConfig", (1, 2)), to=self.olympus)
        if await(some(received(("ConfigResponse", resp)), has=True)):
            self.replicas, self.public_keys = resp
            output("HI")

        output("Client Set Up.")

    # Todo: This should validate the contents of a response (ie. order proofs, history, etc...)
    def valid_response(body, id):
        return body == id

    def create_new_request(r_type, key, val):
        # Increment req_id for uniqueness
        req_id = req_id + 1
        # Create the request object
        return Request(req_id, r_type, key, val, self)

    # Sends a new request
    def send_new_request(request):
        # Todo: Update configuration from Olympus

        # Get head replica
        if self.replicas:
            head_replica = self.replicas[0]
            transmit_request(request, {head_replica})

    # Transmit a request to dest_replicas set
    def transmit_request(request, dest_replicas, request_type = Request.NEW_REQUEST):
        # Generate the appropriate request message
        request_msg = request_type, request.get_body()

        # Todo: Sign request

        # Send the request
        output("Send this:", request_msg)
        send(request_msg, to=dest_replicas)

        # Block until receiving a response or timeout
        if await(some(received(("Response", (resp, id))), has= valid_response(id, request.request_id))):
            # Response received
            output("Received response:", resp, "for request:", request.request_id)
        elif some(received(("Error", (resp, id))), has= valid_response(id, request.request_id)):
            # Error received
            output("Received error:", resp, "for request:", request.request_id)

            # Todo: Update replicas list from Olympus (ie update configuration)

            # Transmit request as a new request to head
            if replicas:
                head_replica = replicas[0]
                transmit_request(request, {head_replica})
        elif timeout(c_timeout):
            # Response not received, retransmit
            output("-----Retransmission of Request ID:", request.request_id, "-----")

            # Retransmit to all replicas
            transmit_request(request, set(replicas), Request.RETRANSMISSION)

    def run():



        output("Sending", 1)

        # Todo: Get the workload from the configuration file
        req = create_new_request(OPTYPE.PUT, "name", "Santiago")
        send_new_request(req)
        output("Sending", 2)
        req = create_new_request(OPTYPE.GET, "name", "Santiago")
        send_new_request(req)
        output("Sending", 3)
        req = create_new_request(OPTYPE.SLICE, "name", (1, 3))
        send_new_request(req)
        output("Sending", 4)
        req = create_new_request(OPTYPE.APPEND, "name", "tenna")
        send_new_request(req)
        output("All Sent.")
        await(len(listof(p, received(("Response", ), from_=p))) == 4)
        output("Received All Responses. Terminating...")