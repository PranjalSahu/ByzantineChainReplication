import nacl.encoding
import nacl.signing
import logging
import itertools
import json
import pickle
import math
from status import STATUS
Request  = import_da('request').Request
OPTYPE   = import_da('request').OPTYPE
Replicas = import_da('replica').Replica
logger   = logging.getLogger('main_logger')


class Olympus(process):

    def setup(failure_count: int, head_timeout: int, nonhead_timeout: int, allfailures: list, checkpt_interval: int):
        self.replica_count = failure_count * 2 + 1
        self.registered_clients  = {}
        self.checkpoint_interval = checkpt_interval
        self.configuration_index_counter = itertools.count()
        new_config = self.initHist(self.replica_count, {}, -1, allfailures)
        self.replicas, self.public_keys, self.private_keys, self.config_index = new_config
        self.pending_config_index = self.config_index - 1

    def run():
        await(False)

    def generate_sign_keys(replica_count):
        public_replica_keys = []
        private_replica_keys = []

        for i in range(replica_count):
            signing_key = nacl.signing.SigningKey.generate()
            verify_key = signing_key.verify_key
            private_replica_keys.append(signing_key)
            public_replica_keys.append(verify_key)

        return public_replica_keys, private_replica_keys

    # Creates a new configuration.
    def initHist(number_of_replicas, runningState, slot_num, allfailures):
        # Increment the current configuration index
        next_config = next(self.configuration_index_counter)
        # Generate replica keys
        pub_keys, priv_keys = generate_sign_keys(number_of_replicas)
        # Create replica list
        replica_list1 = list(new(Replicas, num=math.floor(number_of_replicas/2), at='OlympusNode'))
        replica_list2 = list(new(Replicas, num=math.ceil(number_of_replicas/2), at='ClientNode'))
        replica_list = replica_list1 + replica_list2

        head_replica = replica_list[0]
        for i, replica in enumerate(replica_list):
            private_key  = priv_keys[i]
            next_replica = None
            prev_replica = None

            headflag = (i==0)
            tailflag = (i==number_of_replicas-1)

            if not tailflag:
                next_replica = replica_list[i+1]
            if not headflag:
                prev_replica = replica_list[i-1]

            if headflag:
                replica_timeout = head_timeout
            else:
                replica_timeout = nonhead_timeout

            # setup(state: dict, timeout: int, replicas: list, head: Replica, tail: Replica, next_replica: Replica, prev_replica: Replica):
            setup(replica, (runningState,
                            slot_num,
                            replica_timeout,
                            pub_keys,
                            private_key,
                            STATUS.ACTIVE,
                            headflag,
                            tailflag,
                            next_replica,
                            prev_replica,
                            head_replica,
                            allfailures[i],
                            i,
                            self,
                            next_config,
                            self.checkpoint_interval))

        start(replica_list)
        return replica_list, pub_keys, priv_keys, next_config

    def receive(msg=("GetConfig", body), from_=client):
        m_req_id, m_id, m_publickey = body
        logger.debug("Received config request from Client ID: " + str(m_id))
        registered_clients[m_id] = m_publickey
        response = (m_req_id, self.replicas, self.public_keys, self.config_index)
        send(("ConfigResponse", response), to=client)
        logger.debug("Sent response for config request to client " + str(m_id))

    # Handler for wedge responses
    def receive(msg=("wedgeResponse", body), from_=sender):
        logger.debug("Received a wedge response from: " + str(sender))

    # Handler for wedge responses
    def receive(msg=("catchupResponse", body), from_=sender):
        logger.debug("Received a catchup response from: " + str(sender))

    # Validates order proof signatures and contents
    def validate_proof(proofs, desired_len):
        # Check length of order_proofs
        if len(proofs) != desired_len:
            logger.error("----Proof Error: Truncated Proofs----")
            return False

        # Check for valid order proof signatures
        for i, proof in enumerate(proofs):
            try:
                self.public_keys[i].verify(proof)
            except:
                logger.error("----Proof Signature Validation Error---")
                return False

        # Check for valid order proof contents
        for i in range(1, len(proofs)):
            if proofs[i].message != proofs[i-1].message:
                logger.error("----Proof Content Validation Error--- ")
                return False

        # No errors
        return True

    # This validates the wedge response
    def validate_wedge_reponse(resp, sender, responses):
        index, _, order_history, chkpt_slot, chkpt_proof = resp
        # Validate that the sender is a replica
        if sender not in self.replicas:
            return False

        # Validate the configuration number
        if index != self.pending_config_index:
            return False

        # Validate that the sender hasn't sent a previous wedge response
        if sender in responses:
            return False

        # Validate checkpoint proofs
        if chkpt_slot:
            logger.debug('Validating Checkpoint Proofs')
            if not validate_proof(chkpt_proof, self.replica_count):
                logger.error('---Validate Failed: Checkpoint Proofs---')
                return False

        # Check signature and length and homogenity of each order proof
        logger.debug('Validating Order Proofs')
        for order_proof, _ in order_history.values():
            expected_len = self.replicas.index(sender) + 1
            if not validate_proof(order_proof, expected_len):
                logger.error('---Validate Failed: Order Proofs---')
                return False

        # Check uniqueness of order proof (ie. one proof per slot)
        slots = set()
        for slot_num, _ in order_history.items():
            slots.add(slot_num)   
        # Check for duplicates
        if len(slots) != len(order_history):
            logger.error('---Validate Failed: Duplicate slot number---')
            return False

        responses[sender] = resp
        return True

    def get_longest_history(histories, min_slot):
        # Todo: Do we need to check for holes? I think so since proof length is variable? Or does catch up messages handle this

        # Get the longest history for each slot
        slot_operation_hash = dict()
        for history in histories:
            for slot_num, (order_proofs, _) in history.items():
                if slot_num >= min_slot:
                    if slot_num in slot_operation_hash:
                        if len(slot_operation_hash[slot_num]) < len(order_proofs):
                            slot_operation_hash[slot_num] = order_proofs
                    else:
                        slot_operation_hash[slot_num] = order_proofs

        return slot_operation_hash

    def get_wedge_responses():
        valid_responses = dict()
        # Collect valid responses
        valid_response_replicas = setof(rep, received(('wedgeResponse', resp), from_=rep), validate_wedge_reponse(resp, rep, valid_responses))
        # Extract data from valid responses
        histories = list()
        max_checkpoint_slot = 0
        for _, _, history, chkpt_slot, _ in valid_responses.values():
            # Construct histories
            histories.append(history)
            # Find the latest checkpoint proof
            if max_checkpoint_slot < chkpt_slot:
                max_checkpoint_slot = chkpt_slot

        # Get longest histories
        longest_history = get_longest_history(histories, max_checkpoint_slot)
        return valid_response_replicas, valid_responses, longest_history, max_checkpoint_slot

    def sufficient_wedge_responses():
        replica_list, _, _, _ = get_wedge_responses()
        return len(replica_list) > self.failure_count

    def valid_catchup_response(response, sender, store):
        index, _, _, _ = response
        # Validate that the sender is a replica
        if sender not in self.replicas:
            return False

        # Validate the configuration number
        if index != self.pending_config_index:
            return False

        # Validate that the sender hasn't sent a previous response
        if sender in store:
            return False

        store[sender] = response
        return True

    def get_max_matching_state():
        catchup_responses = dict()
        catchup_replicas = setof(rep, received(('catchupResponse', resp), from_=rep), valid_catchup_response(resp, rep, catchup_responses))
        # Count the number of time a specific state appears
        state_count = dict()
        for replica, (_, _, state, _) in catchup_responses.items():
            hasable_state = json.dumps(state, sort_keys=True)
            if not hasable_state in state_count:
                state_count[hasable_state] = 1
            else:
                state_count[hasable_state] += 1

        max_count = 0
        max_state = {}
        for state, count in state_count.items():
            if max_count < count:
                max_count = count
                max_state = json.loads(state)
        return max_count, max_state, catchup_replicas, catchup_responses

    def sufficient_matching_state():
        # Check for matching state
        max_state_count, _, _, _ = get_max_matching_state()
        return max_state_count > self.failure_count

    # Handler for reconfiguration requests
    def receive(msg=("ReConfig", body), from_=sender):
        error_type, configuration, proofs = body
        logger.debug("Received Reconfig request from " + str(sender) + ' for error_type: ' + str(error_type) +
                    ' with configuration ' + str(configuration))

        # If not a replica, Check for provable misbehavior
        if sender not in self.replicas:
            logger.debug("Reconfig comes from a client")
            # Check for provable misbehavior
            provable_misbehavior = not validate_proof(proofs, self.replica_count)
            if not provable_misbehavior:
                logger.debug("Misbehavior is not provable. Will not reconfigure.")
                return
            else:
                logger.debug("Misbehavior proven... Will attempt to reconfigure.")
        else:
            logger.debug("Reconfig comes from a replica")

        # Careful with this... Using the pending_config_index variable as a lock to get rid of mutliple wedge requests. 
        #   This means that past this point, the reconfiguration must be successful
        if self.pending_config_index >= configuration:
            logger.debug("Previously received a reconfig request for this configuration. Ignoring request for configuration " + str(configuration))
            return
        else:
            logger.info("New reconfig request due to: " + str(error_type) + ". Sending wedge requests")
            self.pending_config_index = self.config_index
        
        # Send wedge requests to all replicas
        for replica in self.replicas:
            wedge_req_body = ()
            wedge_req = ("wedgeRequest", wedge_req_body)
            send(wedge_req, to=replica)

        # Dangerous...
        # The sufficient_wedge_responses method validates the pending_config_index, the sender's identity as a replica, and the 
        # uniqueness of the sender (ie. the message shouldn't be sent more than once by a single replica)
        logger.info("Waiting for wedge responses for configuration: " + str(self.pending_config_index) + " -- " + str(configuration))

        if await(sufficient_wedge_responses()):
            logger.info("Received sufficient wedge responses")

            # Get replica state for quorum
            _, wedge_responses, catchup_history, min_slot = get_wedge_responses()

            # Send catchup messages
            logger.info("Sending catchup messages to all replicas")
            for replica in self.replicas:
                catchup_req_body = catchup_history
                catchup_req = ("catchupRequest", catchup_req_body)
                send(catchup_req, to=replica)

            # Wait for valid catchup responses (ie. at least t matching states)
            if await(sufficient_matching_state()):
                # Get the new replica state
                _, matching_state, _, catchup_responses = get_max_matching_state()

                # Send majority consistent results to clients
                master_result_cache = dict()
                for _, _, _, result_cache in catchup_responses.values():
                    for client, result_group in result_cache.items():
                        if client not in master_result_cache:
                            master_result_cache[client] = dict()
                        if result_group not in master_result_cache[client]:
                            master_result_cache[client][result_group] = 1
                        else:
                            master_result_cache[client][result_group] += 1
                # Flatten the master cache to get the result group that is greatest for each
                for client in master_result_cache:
                    # Find the key with the largest value
                    maximum_key = max(master_result_cache[client], key=master_result_cache[client].get)
                    if master_result_cache[client][maximum_key] > self.failure_count:
                        # Send response to client
                        req, result, result_stmt = maximum_key
                        # Create a signed result proof
                        signed_result_proof = []
                        for priv_key in self.private_keys.values():
                            signed_result_proof.append(priv_key.sign(pickle.dumps(result_stmt)))
                        payload = (result, signed_result_proof, req.request_id)
                        send(("Response", payload), to=client)

                # Stop all replicas
                end(self.replicas, -1)
                # Get the new replica starting slot number
                new_starting_slot = min_slot
                if catchup_history:
                    new_starting_slot = max(catchup_history.keys())
                # Create a new initHist
                logger.info("Calling initHist to create a new set of replicas")
                new_config = self.initHist(self.replica_count, matching_state, new_starting_slot, allfailures)
                # Setting variables
                self.replicas, self.public_keys, self.private_keys, self.config_index = new_config
                logger.info("Successfully Reconfigured.")
