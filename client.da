import itertools
import nacl.hash
from nacl.bindings.utils import sodium_memcmp
import pickle

Request = import_da('request').Request
OPTYPE = import_da('request').OPTYPE
#Olympus = import_da('olympus').Olympus

class Client(process):
    def setup(c_timeout: int, olympus: Olympus, workload: list):
        # Create counters
        self.req_counter = itertools.count()
        self.conf_counter = itertools.count()
        # Initialize empty replicas and replica key
        self.replicas = []
        self.public_keys = []
        self.test_state = {}        # to be used for testing
        output("Client Set Up.")

    # Asks Olympus for the latest config and returns the results
    def getLatestConfig():
        # Increment the conf_id
        req_id = next(self.conf_counter)
        id = self
        public_key = 1  # Todo: Assign a meaningful value
        payload = (req_id, id, public_key)
        send(("GetConfig", payload), to=self.olympus)
        if await(some(received(("ConfigResponse", (resp_id, replica_list, p_keys))), has=(resp_id == req_id))):
            return replica_list, p_keys

    # Todo: This should validate the contents of a response (ie. order proofs, history, etc...)
    def valid_response(body, id):
        return body == id

    def create_new_request(request):
        r_type, key, val = request
        # Increment req_id for uniqueness
        req_id = next(self.req_counter)
        # Create the request object
        return Request(req_id, r_type, key, val, self)

    # Sends a new request
    def send_new_request(request):
        # Update the config before sending a new request
        self.replicas, self.public_keys = getLatestConfig()

        # Get head replica
        if self.replicas:
            head_replica = self.replicas[0]
            transmit_request(request, {head_replica})

    # Returns true if the result proof is valid
    def validate_result_proof(result_proof, result, orig_order):
        # Check for valid proof signatures
        for i, proof in enumerate(result_proof):
            try:
                self.public_keys[i].verify(proof)
            except:
                output("----Result Proof Signature Validation Error---")
                return False

        # Hash the result
        response_hash = nacl.hash.sha256(pickle.dumps(result))
        for proof in result_proof:
            order, result_hash = pickle.loads(proof.message)
            # Compare order command contents
            if not orig_order.get_body() == order.get_body():
                output("---Result Proof Order Validation Error---")
                return False
            # Compare result hash
            if not sodium_memcmp(response_hash, result_hash):
                output("---Result Proof Hash Validation Error---")
                return False

        return True

    # Transmit a request to dest_replicas set
    def transmit_request(request, dest_replicas, request_type = Request.NEW_REQUEST):
        # Generate the appropriate request message
        request_msg = request_type, request.get_body()

        # Todo: Sign request

        # Send the request
        output("Send this:", request_msg)
        send(request_msg, to=dest_replicas)

        # Block until receiving a response or timeout
        if await(some(received(("Response", (res, result_proofs, id))), has= valid_response(id, request.request_id))):
            valid_result_proof = validate_result_proof(result_proofs, res, request)
            if not valid_result_proof:
                output("Invalid result proof received")
                # Todo: Inform Olympus, get a new config, and retransmit?
            else:
                # Valid Response received
                output("Received valid response: '" + str(res) + "' for request:", id)
        elif some(received(("Error", (resp, id))), has= valid_response(id, request.request_id)):
            # Error received
            output("Received error:", resp, "for request:", request.request_id)

            # Update replicas list from Olympus (ie update configuration)
            self.replicas, self.public_keys = getLatestConfig()

            # Transmit request as a new request to head
            if replicas:
                head_replica = replicas[0]
                transmit_request(request, {head_replica})
        elif timeout(c_timeout):
            # Response not received, retransmit
            output("-----Retransmission of Request ID:", request.request_id, "-----")

            # Retransmit to all replicas
            transmit_request(request, set(replicas), Request.RETRANSMISSION)

    def test_result(workload, output_results):
        for index, t in enumerate(workload):
            key = t[1]
            val = t[2]
            if t[0] == OPTYPE.PUT:
                self.test_state[key] = val
                results = 'OK'
                success = True
            elif t[0] == OPTYPE.GET:
                success = True
                if self.test_state.get(key):
                    results = self.test_state.get(key)
                else:
                    results = ''
            elif t[0] == OPTYPE.SLICE:
                s = self.test_state.get(key)
                if s:
                    i, j = val
                    if 0 <= i and i < j and j < len(s):
                        self.test_state[key] = self.test_state[key][i:j]
                        success = True
                        results = 'OK'
            elif t[0] == OPTYPE.APPEND:
                if self.test_state.get(key):
                    self.test_state[key] = self.test_state[key] + val
                    success = True
                    results = 'OK'
            if success != output_results[index][1][0] or results != output_results[index][1][1]:
                output('REQUEST ID ', index, 'FAILED')
            else:
                output('REQUEST ID ', index, 'SUCCESS')
    
    def run():
        for i, request in enumerate(workload):
            output("Sending", i+1)
            req = create_new_request(request)
            send_new_request(req)
        await(len(listof(p, received(("Response", _), from_=p))) == len(workload))

        pvalues = setof((idp, res), received(('Response', (res, _, idp))))
        pvalues = list(pvalues)
        pvalues.sort()

        output('TESTING ALL THE RESULTS')
        test_result(workload, pvalues)
        output("Received All Responses. Terminating...")